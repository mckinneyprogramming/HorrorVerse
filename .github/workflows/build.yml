name: SonarCloud

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, Test, and Analyze
    runs-on: windows-latest

    steps:
      # 1. Checkout the repo
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Install .NET 10 SDK
      - name: Setup .NET 10
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '10.0.x'

      # 3. Setup Java (required by SonarScanner)
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      # 4. Cache SonarScanner
      - name: Cache SonarScanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # 5. Install SonarScanner if cache missed
      - name: Install SonarScanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory -Force
          dotnet tool install dotnet-sonarscanner --tool-path .\.sonar\scanner

      # 6. Install Coverlet globally
      - name: Install Coverlet
        run: dotnet tool install --global coverlet.console

      # 7. Begin SonarCloud analysis, build, run tests, and end analysis
      - name: Build, Test, Coverage, and SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          Write-Host "=== Starting SonarCloud Analysis ==="

          # Begin scanner
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"mckinneyprogramming_HorrorTracker" `
            /o:"mckinneyprogramming" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="coverage.xml"

          # Build solution
          dotnet build --no-incremental

          # Run all MSTest projects with Coverlet
          $testDlls = Get-ChildItem -Path . -Recurse -Filter "*MSTests.dll" | Select-Object -ExpandProperty FullName
          foreach ($dll in $testDlls) {
              Write-Host "Running coverage on $dll"
              coverlet $dll --target "dotnet" --targetargs "test --no-build" -f opencover -o coverage.xml
          }

          # End scanner
          .\.sonar\scanner\dotnet-sonarscanner end /d:s
